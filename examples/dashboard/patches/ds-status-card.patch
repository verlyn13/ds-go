diff --git a/server/index.js b/server/index.js
index 1111111..2222222 100644
--- a/server/index.js
+++ b/server/index.js
@@
 const express = require('express');
 const fetch = require('node-fetch');
 const router = express.Router();
 
 // Existing bridge proxy helpers assumed:
 // - process.env.OBS_BRIDGE_URL (e.g., http://127.0.0.1:7171)
 // - process.env.BRIDGE_TOKEN and process.env.DS_TOKEN (optional)
 const BRIDGE = process.env.OBS_BRIDGE_URL || 'http://127.0.0.1:7171';
 const headers = () => {
   const h = { 'Accept': 'application/json' };
   if (process.env.BRIDGE_TOKEN) h['Authorization'] = `Bearer ${process.env.BRIDGE_TOKEN}`;
   return h;
 };
 
 // DS discovery info via bridge
 router.get('/api/ds/info', async (req, res) => {
   try {
     const r = await fetch(`${BRIDGE}/api/discovery/services`, { headers: headers() });
     const j = await r.json();
     if (!j.ds) return res.status(404).json({ error: 'ds descriptor not found' });
     res.json(j.ds);
   } catch (e) {
     res.status(502).json({ error: String(e) });
   }
 });
 
 // DS health (fetched via ds descriptor)
 router.get('/api/ds/health', async (req, res) => {
   try {
     const r0 = await fetch(`${BRIDGE}/api/discovery/services`, { headers: headers() });
     const j0 = await r0.json();
     const ds = j0.ds;
     if (!ds || !ds.health) return res.status(404).json({ error: 'ds health url missing' });
     const h = { 'Accept': 'application/json' };
     if (process.env.DS_TOKEN) h['Authorization'] = `Bearer ${process.env.DS_TOKEN}`;
     const r1 = await fetch(ds.health, { headers: h });
     const j1 = await r1.json();
     res.json({ url: ds.url, health: j1, openapi: ds.openapi, capabilities: ds.capabilities, well_known: ds.well_known });
   } catch (e) {
     res.status(502).json({ error: String(e) });
   }
 });
 
 // DS well-known passthrough (optional)
 router.get('/api/ds/well-known', async (req, res) => {
   try {
     const r0 = await fetch(`${BRIDGE}/api/discovery/services`, { headers: headers() });
     const j0 = await r0.json();
     const ds = j0.ds;
     if (!ds || !ds.well_known) return res.status(404).json({ error: 'ds well-known url missing' });
     const h = { 'Accept': 'application/json' };
     if (process.env.DS_TOKEN) h['Authorization'] = `Bearer ${process.env.DS_TOKEN}`;
     const r1 = await fetch(ds.well_known, { headers: h });
     const j1 = await r1.json();
     res.json(j1);
   } catch (e) {
     res.status(502).json({ error: String(e) });
   }
 });
 
 module.exports = router;
diff --git a/src/components/DsStatusCard.jsx b/src/components/DsStatusCard.jsx
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/src/components/DsStatusCard.jsx
@@
 import React from 'react';
 
 export default function DsStatusCard() {
   const [state, setState] = React.useState({ status: 'Checking', data: null, error: null });
   React.useEffect(() => {
     (async () => {
       try {
         const info = await fetch('/api/ds/info').then(r => r.json());
         const health = await fetch('/api/ds/health').then(r => r.json());
         setState({ status: 'Online', data: { info, health }, error: null });
       } catch (e) {
         setState({ status: 'Unavailable', data: null, error: String(e) });
       }
     })();
   }, []);
 
   const urls = state.data?.health || {};
   return (
     <div className="card">
       <h3>DS Status</h3>
       <p>Status: <strong>{state.status}</strong></p>
       {state.data && (
         <ul>
           <li>URL: <code>{state.data.health.url}</code></li>
           <li><a href={state.data.health.openapi} target="_blank" rel="noreferrer">OpenAPI</a></li>
           <li><a href={state.data.health.capabilities} target="_blank" rel="noreferrer">Capabilities</a></li>
           <li><a href={state.data.health.well_known} target="_blank" rel="noreferrer">Well-known</a></li>
         </ul>
       )}
       {state.error && <pre className="error">{state.error}</pre>}
     </div>
   );
 }
diff --git a/src/components/Contracts.jsx b/src/components/Contracts.jsx
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/src/components/Contracts.jsx
@@
 import React from 'react';
 
 export default function Contracts() {
   const [list, setList] = React.useState([]);
   const [selected, setSelected] = React.useState('');
   const [content, setContent] = React.useState('');
 
   React.useEffect(() => {
     fetch('/api/discovery/schemas').then(r => r.json()).then(j => setList(j.names || [])).catch(() => setList([]));
   }, []);
 
   React.useEffect(() => {
     if (!selected) return;
     fetch(`/api/obs/schemas/${selected}`).then(r => r.text()).then(setContent);
   }, [selected]);
 
   return (
     <div className="contracts">
       <aside>
         <h3>Schemas</h3>
         <ul>
           {list.map(name => (
             <li key={name}><button onClick={() => setSelected(name)}>{name}</button></li>
           ))}
         </ul>
       </aside>
       <main>
         <div className="toolbar">
           {selected && <a href={`/api/obs/schemas/${selected}`} target="_blank" rel="noreferrer">open raw</a>}
         </div>
         <pre>{content}</pre>
       </main>
     </div>
   );
 }
diff --git a/src/components/Documentation.jsx b/src/components/Documentation.jsx
index 5555555..6666666 100644
--- a/src/components/Documentation.jsx
+++ b/src/components/Documentation.jsx
@@
 import DsStatusCard from './DsStatusCard';
 
 export default function Documentation() {
   return (
     <div>
       <div className="grid">
         <DsStatusCard />
       </div>
       {/* Existing Contracts & OpenAPI links remain below */}
     </div>
   );
 }
diff --git a/src/App.jsx b/src/App.jsx
index 7777777..8888888 100644
--- a/src/App.jsx
+++ b/src/App.jsx
@@
 import Contracts from './components/Contracts';
 
 export default function App() {
   return (
     <Router>
       <nav>
         <Link to="/contracts">Contracts</Link>
       </nav>
       <Routes>
         <Route path="/contracts" element={<Contracts />} />
         {/* ...existing routes... */}
       </Routes>
     </Router>
   );
 }

